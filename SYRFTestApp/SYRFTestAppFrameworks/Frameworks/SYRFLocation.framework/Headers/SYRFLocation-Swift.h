// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef SYRFLOCATION_SWIFT_H
#define SYRFLOCATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SYRFLocation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Manager class responsible for providing device information
/// Used mainly for the unique device id
/// The manager uses in turn persitent storage to save device information (KeyChain and UserDefaults)
SWIFT_CLASS("_TtC12SYRFLocation13DeviceManager")
@interface DeviceManager : NSObject
/// Default initializer
/// Default initialization of the core location manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Manager class responsible for providing heading information monitoring and updates.
/// Heading monitoring is reported based on the HeadingManagerConfig.
/// The headingOrientation from the config determines the heading information as itâ€™s relative to the value used.
/// The heading information updates are obtained based on the headingFilter value, each heading update means that the headingFilter was exceeded.
/// A normal setup for the monitoring heading updates would be:
/// <ul>
///   <li>
///     set up the HeadingDelegate, as heading updates are passed back through the delegate set up either at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the HeadingManager through the configure method
///   </li>
///   <li>
///     request heading updates through the startHeadingUpdates method
///   </li>
///   <li>
///     headingUpdated is called each time a new relevant heading information is obtained that respects the configuration
///   </li>
///   <li>
///     when finished request to stop the updates through the stopHeadingUpdates method
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation14HeadingManager")
@interface HeadingManager : NSObject
/// Default initializer
/// Default initialization of the core location manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLHeading;

@interface HeadingManager (SWIFT_EXTENSION(SYRFLocation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateHeading:(CLHeading * _Nonnull)newHeading;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


/// Manager class responsible for providing location information monitoring and updates.
/// Location monitoring is reported based on the LocationManagerConfig.
/// The combination of the configuration values will determine how often the updates are obtained and how accurate they are.
/// In addition the execution mode of the manager is configured: the background mode, visible indicators etc.
/// A normal setup for the monitoring location updates would be:
/// <ul>
///   <li>
///     set up the LocationDelegate, as location updates are passed back through the delegate set up either at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the LocationManager through the configure method
///   </li>
///   <li>
///     request location updates through the startLocationUpdates method
///   </li>
///   <li>
///     locationUpdated is called each time a new relevant location information is obtained that respects the configuration
///   </li>
///   <li>
///     when finished request to stop the updates through the stopLocationUpdates method
///   </li>
/// </ul>
/// A normal setup for obtaining a one-time location information would be:
/// <ul>
///   <li>
///     set up the LocationDelegate, as location updates are passed back through the delegate either at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the LocationManager through the configure method
///   </li>
///   <li>
///     request current location through the getCurrentLocation method
///   </li>
///   <li>
///     currentLocationUpdated is called one-time after the current location information is obtained that respects the configuration
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation15LocationManager")
@interface LocationManager : NSObject
/// Default initializer
/// Default initialization of the core location manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocation;

@interface LocationManager (SWIFT_EXTENSION(SYRFLocation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


/// Manager class responsible for providing core location permissions status and requesting permissions
/// PermissionsManager is to be used before requesting monitoring or one-time location through the use of the LocationManager.
/// PermissionsManager informs about the permissions status through:
/// <ul>
///   <li>
///     checkAuthorization
///   </li>
///   <li>
///     checkAccuracy
///   </li>
/// </ul>
/// PermissionsManager can request permissions for core location through:
/// <ul>
///   <li>
///     requestAuthorization
///   </li>
///   <li>
///     requestAccuracy
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation18PermissionsManager")
@interface PermissionsManager : NSObject
/// Default initializer
/// Default initialization of the core location manager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface PermissionsManager (SWIFT_EXTENSION(SYRFLocation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (void)locationManagerDidChangeAuthorization:(CLLocationManager * _Nonnull)manager;
@end


/// Manager class responsible for providing region monitoring information.
/// Region monitoring information is reported based on the RegionManagerConfig.
/// A region can be monitored for either entering or exiting or for both.
/// A normal setup for the monitoring a region would be:
/// <ul>
///   <li>
///     set up the RegionDelegate, as region updates are passed back through the delegate set up either at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the RegionManager through the configure method
///   </li>
///   <li>
///     request region monitoring for a provided region through the startRegionUpdates method
///   </li>
///   <li>
///     regionDidEnter or regionDidExit are called each time a the region boundries are crossed
///   </li>
///   <li>
///     when finished request to stop monitoring the provided region through the stopRegionUpdates method
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation13RegionManager")
@interface RegionManager : NSObject
/// Default initializer
/// Default initialization of the core location manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLRegion;

@interface RegionManager (SWIFT_EXTENSION(SYRFLocation)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didEnterRegion:(CLRegion * _Nonnull)region;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didExitRegion:(CLRegion * _Nonnull)region;
@end


/// Base Region data class
SWIFT_CLASS("_TtC12SYRFLocation10SYRFRegion")
@interface SYRFRegion : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Circular Region data model
/// Used by RegionManager
SWIFT_CLASS("_TtC12SYRFLocation18SYRFCircularRegion")
@interface SYRFCircularRegion : SYRFRegion
/// Default initializer
/// Circular Region data is set to default 0 values
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Manager class responsible for providing accelerometer data information.
/// Accelerometer monitoring is reported based on the SensorsAcceleroConfig.
/// Accelerometer monitoring is done on a background queue or the main queue and provides new data at a specified interval
/// A normal setup for the getting accelerometer data would be:
/// <ul>
///   <li>
///     set up the SensorsAcceleroDelegate, as data updates are passed back through the delegate either set up at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the SensorsAcceleroManager through the configure method
///   </li>
///   <li>
///     request acceleromater data updates through the startAcceleroUpdates method
///   </li>
///   <li>
///     acceleroUpdated is called each time new accelerometer data is obtained
///   </li>
///   <li>
///     when finished request to stop the updates through the stopAcceleroUpdates method
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation22SensorsAcceleroManager")
@interface SensorsAcceleroManager : NSObject
/// Default initializer
/// Default initialization of the core motion manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Manager class responsible for providing gyroscope data information.
/// Gyroscope monitoring is reported based on the SensorsGyroConfig.
/// Gyroscope monitoring is done on a background queue or the main queue and provides new data at a specified interval
/// A normal setup for the getting gyroscope data would be:
/// <ul>
///   <li>
///     set up the SensorsGyroDelegate, as data updates are passed back through the delegate either set up at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the SensorsGyroManager through the configure method
///   </li>
///   <li>
///     request gyroscope data updates through the startGyroUpdates method
///   </li>
///   <li>
///     gyroUpdated is called each time new gyroscope data is obtained
///   </li>
///   <li>
///     when finished request to stop the updates through the stopGyroUpdates method
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation18SensorsGyroManager")
@interface SensorsGyroManager : NSObject
/// Default initializer
/// Default initialization of the core motion manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Manager class responsible for providing magnetometer data information.
/// Magnetometer monitoring is reported based on the SensorsMagnetoConfig.
/// Magnetometer monitoring is done on a background queue or the main queue and provides new data at a specified interval
/// A normal setup for the getting magnetometer data would be:
/// <ul>
///   <li>
///     set up the SensorsMagnetoDelegate, as data updates are passed back through the delegate either set up at initialization time or by using the stored property
///   </li>
///   <li>
///     configure the SensorsMagnetoManager through the configure method
///   </li>
///   <li>
///     request magnetometer data updates through the startMagnetoUpdates method
///   </li>
///   <li>
///     magnetoUpdated is called each time new magnetormeter data is obtained
///   </li>
///   <li>
///     when finished request to stop the updates through the stopMagnetoUpdates method
///   </li>
/// </ul>
SWIFT_CLASS("_TtC12SYRFLocation21SensorsMagnetoManager")
@interface SensorsMagnetoManager : NSObject
/// Default initializer
/// Default initialization of the core motion manager and its configuration
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
